function [A_ghx,B_ghu,V] = transition_matrix(oo_)
% =======================================================================
% Purpose of the function is to extract ghx and ghu (transition matrices)
% from dynare output for a convenient use.
% 
% =======================================================================
% out = A_ghx, B_ghu
% -----------------------------------------------------------------------
% INPUT
%   This code must be run after the dynare code, because it makes use of
%   some output that dynare generates, in particular it uses
%	output stored in oo_. It is generated by dynare code therefore in .
% 	order to use this code one must not clear the workspace after dynare 
%	has finished her computations.
%
% OUTPUT
%   variable: A_ghx -> ghx (variables transition matrix) from dynare.
%   variable: B_ghu -> ghu (shocks transition matrix) from dynare.
% =======================================================================
% Sarunas Girdenas, May 2014.
% sg325@exeter.ac.uk.




format short;

%Extracting ghx

%The following piece of code extracts matrix A (variables) in the same
%order as variables are declared in dynare script.

% Let's get the variables list (this is declaration order) and call it C
C=oo_.dr.order_var;
%Now add it to our ghx matrix
A_1=[C oo_.dr.ghx];
%Now sort the matrix in ascending order
A_2=sortrows(A_1);
%Now delete the first column (which is sorting column)
A_2(:,1)=[];
%Call the matrix which is now is exactly the same is in dynare output
A_ghx=transpose(A_2);

%%Extract ghu

%Now add variable list our our ghu matrix
B_1=[C oo_.dr.ghu];
%Now sort the matrix in ascending order
B_2=sortrows(B_1);
%Now delete the first column (which is sorting column)
B_2(:,1)=[];
%Call the matrix which is now the same as in dynare output
B_ghu=transpose(B_2);

V=oo_.var;

end
